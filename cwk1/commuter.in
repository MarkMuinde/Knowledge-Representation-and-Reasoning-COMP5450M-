
% Saved by Prover9-Mace4 Version 0.5, December 2007.
% Last line is a lie. It is there to stop the Prover9-Mace4
% GUI giving a warning when the file is loaded.
% This file was actually reated by BB Prover9 Autograder

set(ignore_option_dependencies). % GUI handles dependencies

if(Prover9). % Options for Prover9
  clear(auto).
  clear(auto_setup).
  clear(auto_limits).
  clear(auto_denials).
  clear(auto_inference).
  clear(auto_process).
  assign(eq_defs, pass).
  assign(max_seconds, 10).
  assign(max_weight, 2147483647).
  assign(sos_limit, -1).
  clear(predicate_elim).
  set(binary_resolution).
  set(paramodulation).
  set(factor).
end_if.

if(Mace4).   % Options for Mace4
  assign(max_seconds, 60).
end_if.

formulas(assumptions).

%% The Commuter
%% A logic puzzle by Brandon Bennett
%%
%% Prover9 file: commuter.p9

%% To solve this first-order logic proof problem, you must replace
%% each of the assumption place-holders __An__ and the goal place-holder
%% __G__, with an approapriate first-order formula that captures the
%% meaning of the given English sentence.
%%
%% Then run Prover9.
%% If your representations are correct, it should find a Proof.
%% You can also check your representations using the Gradescope Autograder.

%% In writing the formulae, you should only use the following vocabulary:
%%
%% Logical symbols:           &  |  -  ->   <->  =  all  exists
%% Brackets and separators:   ( )  [  ]  ,  .
%% Variables:                 Whatever you like, but must be quantified.
%%
%% Propositions: GoToWork, GoOnFoot, GoByCycle, GoByBus, Raining, Windy, -Inside, Helmet, HairWet, HearWell, SplashedByCars

%%
%% Use only the specified vocabulary, otherwise the autograder will not work.



%% A1: "When I go to work by foot or cycle, I am not inside."

        (GoToWork & (GoOnFoot | GoByCycle)) -> (-Inside).

%% A2: "I always wear my helmet when I cycle, but not any other time."

        GoByCycle <-> Helmet.

%% A3: "If it is raining when I am not inside I get splashed by cars unless I can hear well."

        ((Raining & (-Inside)) -> (SplashedByCars & -HearWell)) | ((Raining & (-Inside)) -> (-SplashedByCars & HearWell)).

%% A4: "If it rains I don't cycle and it is never windy except when it rains."

        (Raining -> -GoByCycle) & (Raining <-> Windy).

%% A5: "If I'm wearing my helmet or have wet hair, I can't hear well."

        (Helmet | HairWet) -> -HearWell.

%% A6: "I cannot get to work, except by foot, bus or cycle."

        GoToWork -> GoOnFoot | GoByBus | GoByCycle.

%% A7: "If it rains when I'm not inside and not wearing my helmet, my hair gets wet."

        (Raining & (-Inside) & -Helmet) -> HairWet.

%% A8: "I make sure I never get splashed by cars when going to work."

        GoToWork -> -SplashedByCars.


end_of_list.

formulas(goals).

%% GOAL: "I always go by bus if it is windy when I am going to work"

          (Windy & GoToWork) -> GoByBus.

end_of_list.
